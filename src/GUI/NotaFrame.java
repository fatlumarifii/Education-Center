/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BL.Lenda;
import BL.Nota;
import BL.Profesori;
import BL.Studenti;
import DAL.LendaException;
import DAL.LendaInterface;
import DAL.LendaRepository;
import DAL.NotaException;
import DAL.NotaInterface;
import DAL.NotaRepository;
import DAL.ProfesoriInterface;
import DAL.ProfesoriRepository;
import DAL.StudentiInterface;
import DAL.StudentiRepository;
import Model.KomboBox.LendaComboBoxModel;
import Model.KomboBox.ProfesoriComboBoxModel;
import Model.NotaTableModel;
import Model.StudentiTableModelSugest;
import Search.TST;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.google.common.collect.Lists;
import static java.lang.Character.isDigit;

/**
 *
 * @author ArbÃ«r Suka
 */
public class NotaFrame extends javax.swing.JInternalFrame {

    StudentiInterface studentiR = new StudentiRepository();
    ProfesoriInterface profR = new ProfesoriRepository();
    StudentiTableModelSugest stable = new StudentiTableModelSugest();
    NotaTableModel notaTable = new NotaTableModel();
    LendaInterface lendaR = new LendaRepository();
    NotaInterface notaR = new NotaRepository();
    ProfesoriComboBoxModel profesorimodelcombo;
    LendaComboBoxModel lendamodelcombo;
    List<Studenti> lista;
    private TST<Integer> tstID = new TST<Integer>();
    private TST<Integer> tstE = new TST<Integer>();
    private Studenti studentiK;

    /**
     * Creates new form NotaFrame
     */
    public NotaFrame() {
        initComponents();
        putIntoTstID();
        putIntoTstEmri();
        populateChooserProfesori();
        panel.setVisible(false);
    }

    public void populateChooserProfesori() {
        List<Profesori> profID = profR.findAll();
        profesorimodelcombo = new ProfesoriComboBoxModel(profID);
        ProfesoriChooser.setModel(profesorimodelcombo);
    }

    public void emptyObject() {
        tabela.clearSelection();
        populateChooserProfesori();
        LendaChooser.setSelectedIndex(-1);
        notatxt.setText("");
    }

    private void putIntoTstID() {
        lista = studentiR.findAll();
        for (int i = 0; i < lista.size(); i++) {
            if (!((lista.get(i)).toString1().trim()).equals("")) {
                String key = lista.get(i).toString1().toUpperCase();
                tstID.put(key, i);
            }
        }
    }

    private void putIntoTstEmri() {
        lista = studentiR.findAll();
        for (int i = 0; i < lista.size(); i++) {
            if (!((lista.get(i)).toString2().trim()).equals("")) {
                String key = lista.get(i).toString2().toUpperCase();
                tstE.put(key, i);
            }
        }
    }
    
    private void tabelaSelectedIndexChange() {
        final ListSelectionModel rowSM = tabela.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent Ise) {
                if (Ise.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel rowSM = (ListSelectionModel) Ise.getSource();
                int selectedIndex = rowSM.getAnchorSelectionIndex();
                if (selectedIndex > -1) {
                    Nota nota = notaTable.getNota(selectedIndex);
                    searchtxt.setText(nota.getStudentiID().toString());
                    notatxt.setText("" + nota.getNota());
                    ProfesoriChooser.setSelectedItem(nota.getProfesoriID());
                    LendaChooser.setSelectedItem(nota.getLendaID());
                    ProfesoriChooser.repaint();
                    LendaChooser.repaint();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchtxt = new javax.swing.JTextField();
        panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        droplist = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        notatxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ProfesoriChooser = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        LendaChooser = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        fshijebtn = new javax.swing.JButton();
        anulobtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nota");
        setMinimumSize(new java.awt.Dimension(702, 479));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Emri");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 50, 40));

        searchtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchtxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchtxtKeyTyped(evt);
            }
        });
        getContentPane().add(searchtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 190, 40));

        droplist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                droplistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(droplist);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 200, 130));

        jLabel2.setText("Nota");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 10, 60, 40));

        notatxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                notatxtKeyTyped(evt);
            }
        });
        getContentPane().add(notatxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 10, 100, 40));

        jLabel3.setText("Profesori");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(486, 10, 60, 40));

        ProfesoriChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ProfesoriChooserItemStateChanged(evt);
            }
        });
        getContentPane().add(ProfesoriChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, 120, 40));

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 970, -1));

        jLabel4.setText("Lenda");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(688, 10, 60, 40));

        getContentPane().add(LendaChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(752, 10, 120, 40));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/nota.png"))); // NOI18N
        jButton1.setText("Vendos Noten");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 170, 30));

        fshijebtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        fshijebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/delete.png"))); // NOI18N
        fshijebtn.setText("Fshije Noten");
        fshijebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fshijebtnActionPerformed(evt);
            }
        });
        getContentPane().add(fshijebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 170, 30));

        anulobtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        anulobtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/cancel.png"))); // NOI18N
        anulobtn.setText("Anulo");
        anulobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anulobtnActionPerformed(evt);
            }
        });
        getContentPane().add(anulobtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, 120, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void droplistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_droplistMouseClicked
        String s = droplist.getSelectedValue();
        Studenti studenti = null;
        if(isDigit(s.charAt(0))){
            for(int i = 0 ; i < lista.size() ; i++){
                if(lista.get(i).toString1().equalsIgnoreCase(s))
                    studenti = lista.get(i);
            }
        }
        else{
            for(int i = 0 ; i < lista.size() ; i++){
                if(lista.get(i).toString2().equalsIgnoreCase(s))
                    studenti = lista.get(i);
            }
        }
        searchtxt.setText(studenti.getEmri()+" "+studenti.getMbiemri());
        try {
            tabelaLoadNotat(studenti);
        } catch (NotaException ex) {
            Logger.getLogger(NotaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        studentiK = studenti;
        panel.setVisible(false);
    }//GEN-LAST:event_droplistMouseClicked

    public void tabelaLoadNotat(Studenti s) throws NotaException {
        List<Nota> nota = notaR.findByStudentiID(s.getStudentiID());
        notaTable.add(nota);
        tabela.setModel(notaTable);
        notaTable.fireTableDataChanged();
    }

    private void searchtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtxtKeyTyped
        
    }//GEN-LAST:event_searchtxtKeyTyped

    private void ProfesoriChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ProfesoriChooserItemStateChanged
        Profesori p = (Profesori) ProfesoriChooser.getSelectedItem();
        List<Lenda> listal = null;
        try {
            listal = lendaR.findByProfId(p.getProfesoriID());
        } catch (LendaException ex) {
            Logger.getLogger(NotaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateLendaChooser(listal);
    }//GEN-LAST:event_ProfesoriChooserItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int row = tabela.getSelectedRow();
            if (searchtxt.getText().equals("") || notatxt.getText().equals("") || ProfesoriChooser.getSelectedIndex() == -1 || LendaChooser.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "Ju lutem plotesoni Ã§do fushÃ« !!!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (row == -1) {
                    Profesori p = (Profesori) ProfesoriChooser.getSelectedItem();
                    Lenda l = (Lenda) LendaChooser.getSelectedItem();
                    Nota n = new Nota();
                    n.setNota(Integer.parseInt(notatxt.getText()));
                    n.setProfesoriID(p);
                    n.setLendaID(l);
                    n.setStudentiID(studentiK);

                    notaR.create(n);
                    JOptionPane.showMessageDialog(this, "E dhÃ«na u ruajt me sukses");

                } else {
                    Profesori p = (Profesori) ProfesoriChooser.getSelectedItem();
                    Lenda l = (Lenda) LendaChooser.getSelectedItem();
                    Nota n = this.notaTable.getNota(row);
                    n.setNota(Integer.parseInt(notatxt.getText()));
                    n.setProfesoriID(p);
                    n.setLendaID(l);
                    n.setStudentiID(studentiK);
                    notaR.edit(n);
                    JOptionPane.showMessageDialog(this, "E dhÃ«na u editua me sukses");
                }
                emptyObject();
                tabelaLoadNotat(studentiK);
            }

        } catch (NotaException pe) {
            JOptionPane.showMessageDialog(this, pe.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fshijebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fshijebtnActionPerformed
        try {
            int row = tabela.getSelectedRow();
            if (row > -1) {
                Object[] ob = {"Po", "Jo"};
                int i = javax.swing.JOptionPane.showOptionDialog(this, "A dÃ«shironi ta fshini ?", "Fshirja", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, ob, ob[1]);
                if (i == 0) {
                    Nota n = this.notaTable.getNota(row);
                    notaR.remove(n);
                    tabelaLoadNotat(studentiK);
                    emptyObject();
                    JOptionPane.showMessageDialog(this, "E dhÃ«na Ã«shtÃ« fshir me sukses !");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nuk keni selektuar asgjÃ« pÃ«r tÃ« fshir !");
            }
        } catch (NotaException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_fshijebtnActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        int row = tabela.getSelectedRow();
        if (row > -1) {
            Nota n = this.notaTable.getNota(row);
            studentiK = n.getStudentiID();
            LendaChooser.setSelectedItem(n.getLendaID());
            ProfesoriChooser.setSelectedItem(n.getProfesoriID());
            searchtxt.setText("" + studentiK);
            notatxt.setText("" + n.getNota());
        }
    }//GEN-LAST:event_tabelaMouseClicked

    private void anulobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anulobtnActionPerformed
        studentiK = null;
        emptyObject();
    }//GEN-LAST:event_anulobtnActionPerformed

    private void searchtxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchtxtKeyReleased
        char c = evt.getKeyChar();
        String t = searchtxt.getText().toUpperCase();
        if (!(c == KeyEvent.VK_CAPS_LOCK || c == KeyEvent.VK_SHIFT )) {
            if(!(t.equals("")||t==null)){
                if(isDigit(t.charAt(0))){
                    Iterable<String> it = tstID.keysWithPrefix(t);
                    List<String> itlist = Lists.newArrayList(it.iterator());
                    String[] st = new String[itlist.size()];
                    for (int i = 0; i < itlist.size(); i++) {   
                        st[i] = itlist.get(i);
                    }
                    if(!(st.length==0)){
                        droplist.setListData(st);
                        panel.setVisible(true);
                    }
                    else
                        panel.setVisible(false);
                }
                else{
                    Iterable<String> it = tstE.keysWithPrefix(t);
                    List<String> itlist = Lists.newArrayList(it.iterator());
                    String[] st = new String[itlist.size()];
                    for (int i = 0; i < itlist.size(); i++) {   
                        st[i] = itlist.get(i);
                    }
                    if(!(st.length==0)){
                        droplist.setListData(st);
                        panel.setVisible(true);
                    }
                    else
                        panel.setVisible(false);
                }
            }
            else
                panel.setVisible(false);
        }
    }//GEN-LAST:event_searchtxtKeyReleased

    private void notatxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_notatxtKeyTyped
        char c = evt.getKeyChar();
        String number =  notatxt.getText();
        if(number.length()>0 ){
            JOptionPane.showMessageDialog(this, "Keni tejakaluar numrin e lejuar te shkronjave(50)", "Gabim" , 0);
            evt.consume();
        }
    }//GEN-LAST:event_notatxtKeyTyped

    public void populateLendaChooser(List<Lenda> l) {
        lendamodelcombo = new LendaComboBoxModel(l);
        LendaChooser.setModel(lendamodelcombo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Lenda> LendaChooser;
    private javax.swing.JComboBox<Profesori> ProfesoriChooser;
    private javax.swing.JButton anulobtn;
    private javax.swing.JList<String> droplist;
    private javax.swing.JButton fshijebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField notatxt;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField searchtxt;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables
}
